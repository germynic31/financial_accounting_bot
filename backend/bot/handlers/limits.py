# TODO: –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞
from pydantic import ValidationError
from telegram import Update
from telegram.ext import ContextTypes

from bot.constants import NO_HAVE_LIMITS_MSG
from core.database import get_db
from crud.limits import get_limits, set_limit
from schemas.limits import LimitCreate


async def set_limit_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞."""
    try:
        args = context.args
        if len(args) != 2:
            raise ValueError

        category = (args[0]).lower()
        amount = float(args[1])
        limit_data = LimitCreate(
            user_id=update.effective_user.id,
            category_name=category,
            amount=amount,
        )

        db = next(get_db())
        set_limit(db, limit_data)

        await update.message.reply_text(
            f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount} ‚ÇΩ",
        )
    except ValidationError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e.errors()[0]['msg']}",
        )
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlimit [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [—Å—É–º–º–∞]\n"
            "–ü—Ä–∏–º–µ—Ä: /setlimit –ø—Ä–æ–¥—É–∫—Ç—ã 5000",
        )


async def show_limits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞."""
    db = next(get_db())
    limits = get_limits(db, update.effective_user.id)

    if not limits:
        await update.message.reply_text(NO_HAVE_LIMITS_MSG)
        return

    text = "üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n" + "\n".join(
        f"‚Ä¢ {limit.category_name}: {limit.amount} ‚ÇΩ"
        for limit in limits
    )
    await update.message.reply_text(text)
