from constants import HOW_TO_USE_MSG, NO_HAVE_LIMITS_MSG
from crud import (
    create_transaction,
    create_user,
    get_limits,
    get_user,
    get_user_stats,
    get_user_transactions,
    set_limit,
)
from database import SessionLocal
from enums import TransactionEnum
from keyboards import (
    back_to_profile_keyboard,
    get_main_reply_keyboard,
    history_pagination_keyboard,
    profile_keyboard,
    remove_stats_keyboard,
)
from pydantic import ValidationError
from schemas import LimitCreate, TransactionCreate, UserCreate
from telegram import Update
from telegram.ext import ContextTypes
from utils import generate_pie_chart


def get_db():  # TODO: —Å–¥–µ–ª–∞—Ç—å Session DI
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Å—Å–∏–∏."""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç."""
    db = next(get_db())
    user_id = update.effective_user.id
    username = update.effective_user.username

    user = get_user(db, user_id)
    if not user:
        user_data = UserCreate(telegram_id=user_id, username=username)
        create_user(db, user_data)
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ë–æ—Ç!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_reply_keyboard(),
        )
    else:
        await update.message.reply_text(
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_reply_keyboard(),
        )


async def how_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–≥–∞–π–¥ –ø–æ –±–æ—Ç—É."""
    await update.message.reply_text(HOW_TO_USE_MSG)


async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å."""
    await update.message.reply_text(
        "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=profile_keyboard(),
    )


async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    await query.answer()

    if query.data == "back_to_profile":
        await query.edit_message_text(
            "üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=profile_keyboard(),
        )

    elif query.data == "delete_stats":
        await query.delete_message()
        return

    elif query.data == "limits":
        db = next(get_db())
        limits = get_limits(db, update.effective_user.id)

        if not limits:
            await query.edit_message_text(
                NO_HAVE_LIMITS_MSG,
                reply_markup=back_to_profile_keyboard(),
            )
            return

        text = "üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n" + "\n".join(
            f"‚Ä¢ {limit.category_name}: {limit.amount} ‚ÇΩ"
            for limit in limits
        )
        await query.edit_message_text(
            text,
            reply_markup=back_to_profile_keyboard(),
        )
        return

    elif query.data == "stats":
        db = next(get_db())
        user_id = query.from_user.id
        stats = get_user_stats(db, user_id)

        chart = await generate_pie_chart(stats["expenses_by_category"])
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=chart,
            caption=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                   f"‚Ä¢ –î–æ—Ö–æ–¥—ã: {stats['total_income']} ‚ÇΩ\n"
                   f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {stats['total_expense']} ‚ÇΩ\n"
                   f"‚Ä¢ –ë–∞–ª–∞–Ω—Å: {stats['balance']} ‚ÇΩ",
            reply_markup=remove_stats_keyboard(),
        )

    elif query.data.startswith("history_"):
        page = int(query.data.split("_")[1])
        db = next(get_db())
        user_id = query.from_user.id
        transactions = get_user_transactions(db, user_id, page=page)
        total_pages = (len(transactions) // 5 + 1)

        history_text = "üìù –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"

        for i, tx in enumerate(transactions, start=1):
            if tx.type == 'income':
                type_operation = '–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ'
            else:
                type_operation = '—Ç—Ä–∞—Ç–∞'
            history_text += (
                f"{i}. {tx.created_at.strftime('%d.%m.%Y')} |"
                f" {type_operation}: {tx.amount} ‚ÇΩ ({tx.category.name})\n"
            )

        await query.edit_message_text(
            history_text,
            reply_markup=history_pagination_keyboard(page, total_pages),
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    db = next(get_db())
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "‚ùî –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?":
        await how_to_use(update, context)
        return
    if text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await profile(update, context)
        return

    try:
        amount_part = text.split(maxsplit=1)[0]
        category_name = (text.split(maxsplit=1)[1]).lower()
        amount = float(amount_part)
        transaction_type = (
            TransactionEnum.income if amount > 0 else TransactionEnum.expense
        )

        transaction_data = TransactionCreate(
            amount=abs(amount),
            type=transaction_type,
            category_name=category_name,
        )
        create_transaction(db, transaction_data, user_id)
        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {'+' if amount > 0 else '-'}"
            f"{abs(amount)} ({category_name})",
        )
    except ValidationError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e.errors()[0]['msg']}",
        )
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `-500 —Ç–∞–∫—Å–∏` –∏–ª–∏ `+30000 –∑–∞—Ä–ø–ª–∞—Ç–∞`",
        )


async def set_limit_command(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–º–∏—Ç–∞."""
    try:
        args = context.args
        if len(args) != 2:
            raise ValueError

        category = (args[0]).lower()
        amount = float(args[1])
        limit_data = LimitCreate(
            user_id=update.effective_user.id,
            category_name=category,
            amount=amount,
        )

        db = next(get_db())
        set_limit(db, limit_data)

        await update.message.reply_text(
            f"‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount} ‚ÇΩ",
        )
    except ValidationError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö: {e.errors()[0]['msg']}",
        )
    except (IndexError, ValueError):
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setlimit [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [—Å—É–º–º–∞]\n"
            "–ü—Ä–∏–º–µ—Ä: /setlimit –ø—Ä–æ–¥—É–∫—Ç—ã 5000",
        )


async def show_limits(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–≤–æ–¥–∞ –ª–∏–º–∏—Ç–∞."""
    db = next(get_db())
    limits = get_limits(db, update.effective_user.id)

    if not limits:
        await update.message.reply_text(NO_HAVE_LIMITS_MSG)
        return

    text = "üìä –í–∞—à–∏ –ª–∏–º–∏—Ç—ã:\n" + "\n".join(
        f"‚Ä¢ {limit.category_name}: {limit.amount} ‚ÇΩ"
        for limit in limits
    )
    await update.message.reply_text(text)
